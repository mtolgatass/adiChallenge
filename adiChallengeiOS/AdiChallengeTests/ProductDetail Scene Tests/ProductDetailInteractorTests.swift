//
//  ProductDetailInteractorTests.swift
//  CicekSepetiCaseApp
//
//  ProductDetailInteractorTests.swift
//  AdiChallenge
//
//  Created by Tolga TaÅŸ on 25.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AdiChallenge
import XCTest

class ProductDetailInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ProductDetailInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupProductDetailInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupProductDetailInteractor()
    {
        sut = ProductDetailInteractor()
    }
    
    // MARK: Test doubles
    
    class ProductDetailPresentationLogicSpy: ProductDetailPresentationLogic{
        // MARK: Method call expectations
        var presentFetchedProductsCalled = false
        var submitReviewCalled = false
        
        // MARK: Spied methods
        func presentFetchedProductDetail(response: ProductDetail.ProductDetail.Response) {
            presentFetchedProductsCalled = true
        }
        
        func handleSubmitReviewResult(response: ProductDetail.SubmitReview.Response) {
            submitReviewCalled = true
        }
    }
    
    class ProductDetailWorkerSpy: ProductDetailWorker {
        // MARK: Method call expectations
        var fetchProductDetailCalled = false
        var submitReviewCalled = false
        // MARK: Spied methods
        
        override func productDetailService(productId: String, completion: @escaping((ProductDetailModel?, APIError?) -> Void)) {
            completion(nil, nil)
            fetchProductDetailCalled = true
        }
        
        override func submitReview(productId: String, rating: Int, review: String, completion: @escaping((ReviewModel?, APIError?) -> Void)) {
            completion(nil, nil)
            submitReviewCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldAskWorkerToFetchProductsAndPresenterToFormatIt() {
        // Given
        let productDetailPresentationLogicSpy = ProductDetailPresentationLogicSpy()
        sut.presenter = productDetailPresentationLogicSpy
        let productDetailWorkerSpy = ProductDetailWorkerSpy()
        sut.worker = productDetailWorkerSpy
        
        // When
        sut.fetchProductDetail(productId: "")
        sut.submitReview(productId: "", rating: 0, review: "")
        
        // Then
        XCTAssertTrue(productDetailWorkerSpy.fetchProductDetailCalled, "fetchProducts should ask the worker to get products from the given URL.")
        XCTAssertTrue(productDetailPresentationLogicSpy.presentFetchedProductsCalled, "fetchProducts should ask the presenter to format the result.")
        XCTAssertTrue(productDetailWorkerSpy.submitReviewCalled, "submitReview should ask the worker to submit the review to the given URL.")
        XCTAssertTrue(productDetailWorkerSpy.submitReviewCalled, "submitReview should ask the presenter to format the result.")
        
    }
}
