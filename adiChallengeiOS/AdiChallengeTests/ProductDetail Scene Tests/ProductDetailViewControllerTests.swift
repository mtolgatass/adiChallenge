//
//  ProductListViewControllerTests.swift
//  AdiChallenge
//
//  Created by Tolga Ta≈ü on 25.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AdiChallenge
import XCTest

class ProductDetailViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ProductDetailViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupProductDetailViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupProductDetailViewController()
    {
        sut = ProductDetailViewController()
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class ProductDetailBusinessLogicSpy: ProductDetailBusinessLogic {
        // MARK: Method call expectations
        var fetchProductsCalled = false
        var submitReviewCalled = false
        
        // MARK: Spied methods
        func fetchProductDetail(productId: String) {
            fetchProductsCalled = true
        }
        
        func submitReview(productId: String, rating: Int, review: String) {
            submitReviewCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchProductsWhenViewIsLoaded()
    {
        // Given
        let productDetailBusinessLogicSpy = ProductDetailBusinessLogicSpy()
        sut.interactor = productDetailBusinessLogicSpy
        
        // When
        loadView()
        sut.fetchProductDetail(productId: "HI333")
        
        // Then
        XCTAssertTrue(productDetailBusinessLogicSpy.fetchProductsCalled, "viewDidLoad() should ask the interactor to fetch product detail")
    }
    
    func testShouldSubmitReview()
    {
        // Given
        let productDetailBusinessLogicSpy = ProductDetailBusinessLogicSpy()
        sut.interactor = productDetailBusinessLogicSpy
        
        // When
        loadView()
        sut.submitReview(productId: "HI333", rating: 5, review: "")
        
        // Then
        XCTAssertTrue(productDetailBusinessLogicSpy.submitReviewCalled, "action should ask the interactor to submit the review")
    }
    
}
