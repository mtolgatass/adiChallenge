//
//  ProductDetailPresenterTests.swift
//  AdiChallenge
//
//  Created by Tolga Ta≈ü on 25.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AdiChallenge
import XCTest

class ProductDetailPresenterTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ProductDetailPresenter!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupProductDetailPresenter()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupProductDetailPresenter()
  {
    sut = ProductDetailPresenter()
  }
  
  // MARK: Test doubles
  
  class ProductDetailDisplayLogicSpy: ProductDetailDisplayLogic {
    // MARK: Method call expectations
    var displayProductsCalled = false
    var submitReviewResponseCalled = false

    // MARK: Spied methods
    func displayProductDetail(viewModel: ProductDetail.ProductDetail.ViewModel) {
        displayProductsCalled = true
    }
    
    func submitReviewResponseHandler(result: ReviewModel) {
        submitReviewResponseCalled = true
    }
  }
    
    // MARK: Tests
    
    func testPresentProducts()
    {
        // Given
        let productDetailDisplayLogicSpy = ProductDetailDisplayLogicSpy()
        sut.viewController = productDetailDisplayLogicSpy
        let expectation = self.expectation(description: "Wait for displayProductDetail to return.")
        var product: ProductDetailModel?
        let worker = ProductDetailWorker()
        worker.productDetailService(productId: "HI333") { (productDetail, error) in
            expectation.fulfill()
            product = productDetail
        }
        waitForExpectations(timeout: 60)
        let successfulResponse = ProductDetail.ProductDetail.Response(productDetailModel: product, error: nil)
        let failedResponse = ProductDetail.ProductDetail.Response(productDetailModel: nil, error: APIError.internalError)
        
        // When
        sut.presentFetchedProductDetail(response: successfulResponse)
        sut.presentFetchedProductDetail(response: failedResponse)
        
        // Then
        XCTAssertTrue(productDetailDisplayLogicSpy.displayProductsCalled, "presentFetchedProducts(response:) should ask the view controller to display the result")
    }
    
    func testSubmitReview()
    {
        // Given
        let productDetailDisplayLogicSpy = ProductDetailDisplayLogicSpy()
        sut.viewController = productDetailDisplayLogicSpy
        let expectation = self.expectation(description: "Wait for submitReviewResponseHandler to return.")
        var review: ReviewModel?
        let worker = ProductDetailWorker()
        
        worker.submitReview(productId: "HI333", rating: 5, review: "") { (reviewModel, error) in
            expectation.fulfill()
            review = reviewModel
        }
        waitForExpectations(timeout: 60)
        
        let successfulResponse = ProductDetail.SubmitReview.Response(result: review, error: nil)
        let failedResponse = ProductDetail.SubmitReview.Response(result: nil, error: APIError.internalError)
        
        // When
        sut.handleSubmitReviewResult(response: successfulResponse)
        sut.handleSubmitReviewResult(response: failedResponse)
        
        // Then
        XCTAssertTrue(productDetailDisplayLogicSpy.submitReviewResponseCalled, "handleSubmitReviewResult(response:) should ask the view controller to display the result")
    }
}
