//
//  ProductListViewController.swift
//  AdiChallenge
//
//  Created by Tolga TaÅŸ on 25.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol ProductListDisplayLogic: class {
    func displayProductList(viewModel: ProductList.ViewModel)
    func displayError(error: APIError)
}

class ProductListViewController: UIViewController, ProductListDisplayLogic {
    var interactor: ProductListBusinessLogic?
    var productList: [ProductModel] = [ProductModel]() {
        didSet {
            DispatchQueue.main.async {
                self.productsTableView.reloadData()
            }
        }
    }
    
    var filteredProductList: [ProductModel] = [ProductModel]() {
        didSet {
            DispatchQueue.main.async {
                self.productsTableView.reloadData()
            }
        }
    }
    
    var isSearching: Bool = false

    // MARK: - Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: - Setup
  
    private func setup() {
        let viewController = self
        let interactor = ProductListInteractor()
        let presenter = ProductListPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: - Variables
    lazy var productsTableView = UITableView()
    
    lazy var searchBar = UISearchBar(frame: CGRect(x: 0, y: 0, width: 200, height: 20))
  
    // MARK: - View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
        productListServiceCall()
        configureUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.navigationController?.isNavigationBarHidden = false
    }
  
    // MARK: - Class Functions
    
    func configureUI() {
        setTableView()
        
        searchBar.delegate = self
        
        self.view.addSubview(productsTableView)
        let rightBarButtonItem = UIBarButtonItem(customView: searchBar)
        self.navigationItem.rightBarButtonItem = rightBarButtonItem
        
        productsTableView.snp.makeConstraints { (maker) in
            maker.edges.equalToSuperview()
        }
    }
    
    func setTableView() {
        productsTableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
        productsTableView.delegate = self
        productsTableView.dataSource = self
    }
  
    func productListServiceCall() {
        DispatchQueue.main.async {
            self.view.showLoading()
        }
        interactor?.fetchProductList()
    }
    
    func displayProductList(viewModel: ProductList.ViewModel) {
        DispatchQueue.main.async {
            self.view.stopLoading()
        }
        self.productList = viewModel.displayResults.resultModel
    }
    func displayError(error: APIError) {
        DispatchQueue.main.async {
            self.showError(error: error)
        }
    }
    
}
extension ProductListViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return productList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        
        cell.selectionStyle = .none
        cell.textLabel?.font = .systemFont(ofSize: 14, weight: .medium)
        cell.textLabel?.text = productList[indexPath.row].id
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let productId = productList[indexPath.row].id else {
            return
        }
        
        let vc = ProductDetailViewController()
        vc.productId = productId
        
        self.navigationController?.pushViewController(vc, animated: true)
    }
}
extension ProductListViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchText.count >= 3 {
            isSearching = true
            filteredProductList = productList.filter { (product) -> Bool in
                return (product.name?.contains(searchText.lowercased()) ?? false) || (product.description?.contains(searchText.lowercased()) ?? false)
            }
        } else {
            isSearching = false
        }
    }
}
